# Living World

## Overview

aThis livebook demonstrates how to create a world using the `living_world` library. 
It also breaks down every step needed to create a 2-d landmass with mountains and oceans.

## Helper Functions

```elixir
alias VegaLite, as: Vl

# Helper functions
graph_2d = fn graph_data ->
  Vl.new(width: 300, height: 300)
  |> Vl.data_from_values(graph_data)
  |> Vl.mark(:rect)
  |> Vl.encode_field(:x, "screen_x")
  |> Vl.encode_field(:y, "screen_y")
  |> Vl.encode_field(:color, "noise", type: :quantitative)
  |> Vl.config(view: [stroke: nil])
end

graph_1d = fn graph_data ->
  Vl.new(width: 600, height: 200)
  |> Vl.data_from_values(graph_data)
  |> Vl.mark(:line)
  |> Vl.encode_field(:x, "screen_x")
  |> Vl.encode_field(:y, "noise", type: :quantitative)
  |> Vl.encode_field(:color, "name", type: :nominal)
end

graph_1d_slice = fn graph_data ->
  Vl.new(width: 600, height: 200)
  |> Vl.data_from_values(graph_data)
  |> Vl.transform(filter: [and: [[field: "screen_y", equal: "1"]]])
  |> Vl.mark(:line)
  |> Vl.encode_field(:x, "screen_x")
  |> Vl.encode_field(:y, "noise", type: :quantitative)
end
```

## Perlin Noise Generator

All worlds start with a random noise generator. 
We will use a perlin noise generator as it creates smooth transitions between the 
randomness.

In this case, we are using the perline noise generator from  
https://gist.github.com/sgeos/f476d4c9d4133916771b6d39d46ce50a

The most basic function is `ClassicNoise.noise(x, y, z)` will return a consistent 
value for that position

```elixir
alias LivingWorld.Noise.ClassicNoise

ClassicNoise.noise(2, 2, 1.2)
```

You can visualise the values that `ClassicNoise.noise(x, y, z)` returns over a 2d map. 
This makes it clearer to see how the values smoothly change from one two another

```elixir
# Fix the z-dimesion since we are creating a 2-d map
z = 1.2

graph_data =
  for x <- 0..50, y <- 0..50 do
    %{"screen_x" => x, "screen_y" => y, "z" => z, "noise" => ClassicNoise.noise(x, y, z)}
  end
```

You can use a graph to visualise this data

```elixir
graph_2d.(graph_data)
```

In the above graph, instead of a normal static like on the old tvs, this has *groups* of 
high and low values. i.e you very rarely get a single very low value in the middle of a bunch of high values. Especially when you zoom out as shown in the next section.

This will be the basis for the mountains and oceans. 
Though another layer of abstraction will be needed over the top.

You can look at a single strip to see what the landscape would look like side on.

```elixir
graph_1d_slice.(graph_data)
```

It's something, but not quite the mountain range view we are wanting. 
For that let's first understand the properties of a single wave. Then use that knowledge to layer the perlin noise over itself.

## Noise Wave Properties

A single noise wave has scale, amplitude and frequency. They affects the value of the noise as shown below:

```elixir
noise_value = fn x, y, scale, amplitude, frequency ->
  # HERE is scale, amplitude & frequency being used
  sample_x = x / scale * frequency
  sample_y = y / scale * frequency

  amplitude * ClassicNoise.noise(sample_x, sample_y, 1)
end

noise_value_to_data_point = fn noise, name, x, y, scale ->
  %{
    "name" => name,
    "x" => x / scale,
    "y" => y / scale,
    "screen_x" => x,
    "screen_y" => y,
    "noise" => noise
  }
end

noise_data_point = fn name, x, y, scale, amplitude, frequency ->
  noise_value.(x, y, scale, amplitude, frequency)
  |> noise_value_to_data_point.(name, x, y, scale)
end
```

### Scale

Scale is like zooming in and out of the noise. By default you are very close, as you scale out you can see more of the smooth pattern.

```elixir
for x <- 0..50, y <- 0..50 do
  noise_data_point.("Scale: 1", x, y, 1.1, 1, 1)
end
|> graph_2d.()
```

```elixir
for x <- 0..50, y <- 0..50 do
  noise_data_point.("Scale: 20", x, y, 20, 1, 1)
end
|> graph_2d.()
```

### Amplitude

<!-- livebook:{"break_markdown":true} -->

Amplitude is how pronounced the peaks of the noise wave are. A higher amplitude is more pronounced. The graph below shows the same noise wave with 3 different amplitudes applied. The wave has been zoomed out to better see the effect that Amplitude has.

```elixir
0..50
|> Enum.flat_map(fn
  x ->
    [
      noise_data_point.("Amplitude: 1", x, 1, 5, 1, 1),
      noise_data_point.("Amplitude: 3.5", x, 1, 5, 3.5, 1),
      noise_data_point.("Amplitude: 0.3", x, 1, 5, 0.3, 1)
    ]
end)
|> graph_1d.()
```

### Frequency

<!-- livebook:{"break_markdown":true} -->

Frequency relates to the distance between the peaks in the wave. The higher the frequency the less space between the peaks. The graph below shows the same noise wave with 2 different frequencies applied.

```elixir
0..50
|> Enum.flat_map(fn
  x ->
    [
      noise_data_point.("Frequency: 1", x, 1, 5, 1, 1),
      noise_data_point.("Frequency: 1.1", x, 1, 5, 1, 1.1)
    ]
end)
|> graph_1d.()
```

## Layering Perlin Noise

When thinking about a land mass, there are three levels of detail we want to display:

1. The general outline of the land mass
2. The boulders
3. The small rocks.

A single 2d noise map could show one of these, but not all three. To make it work we can layer the perlin noise overitself which will will give the intended effects.

The new properties to know are _ocatives_, _persistance_, _lacunarity_. They affect the _amplitude_ and _frequency_ as shown below:

```elixir
do_octaves = fn name, x, y, num_octaves, persistance, lacunarity, scale ->
  # Octaves are the number of iterations we will do over a single data point
  0..(num_octaves - 1)
  |> Enum.reduce(
    %{
      amplitude: 1,
      frequency: 1,
      value: 0
    },
    fn _, acc ->
      # Notice how persistance and lacunarity modify the amplitude and frequency
      %{
        amplitude: acc.amplitude * persistance,
        frequency: acc.frequency * lacunarity,
        value: acc.value + noise_value.(x, y, scale, acc.amplitude, acc.frequency)
      }
    end
  )
  |> then(& &1.value)
  |> noise_value_to_data_point.(name, x, y, scale)
end
```

```elixir
# Helper functions

scale_value = fn num, in_min, in_max, out_min, out_max ->
  (num - in_min) * (out_max - out_min) / (in_max - in_min) + out_min
end

normalise_octave_values = fn ocatves ->
  {min_noise, max_noise} =
    ocatves
    |> Enum.reduce({nil, nil}, fn
      %{"noise" => noise}, {nil, nil} ->
        {noise, noise}

      %{"noise" => noise}, {min_noise, max_noise} when noise > max_noise ->
        {min_noise, noise}

      %{"noise" => noise}, {min_noise, max_noise} when noise < min_noise ->
        {noise, max_noise}

      _, acc ->
        acc
    end)

  ocatves
  |> Enum.map(fn %{"noise" => noise} = data_point ->
    scaled_noise_point = scale_value.(noise, min_noise, max_noise, -1, 1)
    Map.put(data_point, "noise", scaled_noise_point)
  end)
end
```

### Octaves

Octaves are the number of times to layer the perlin noise over itself. The persistance and lacunarity values are modified every loop.

When persistance and lacunarity are set to 1, the effect is the same as changing the _scale_. If we normalise the values to between 1 and -1 then there is no difference.

```elixir
# Uncomment/comment the `normalise_octave_values` lines below to 
# see how there is no difference when persistance and lacunarity are set to 1
octaves_1_values =
  0..100
  |> Enum.map(&do_octaves.("Octaves: 1", &1, 1, 1, 1, 1, 5))

# |> normalise_octave_values.()

octaves_3_values =
  0..100
  |> Enum.map(&do_octaves.("Octaves: 3", &1, 1, 3, 1, 1, 5))

# |> normalise_octave_values.() 

(octaves_1_values ++ octaves_3_values)
|> normalise_octave_values.()
|> graph_1d.()
```

### Lacunarity

The Lacurnarity modifies the frequency each octave. When combined with the octaves, it increases the bumpiness and the small scale.

It is useful for small features, like rocks. The higher the value the more detail.

```elixir
lacunarity_1_values =
  0..300
  |> Enum.map(&do_octaves.("Lacunarity: 1", &1, 1, 3, 0.5, 1, 25))
  |> normalise_octave_values.()

lacunarity_2_values =
  0..300
  |> Enum.map(&do_octaves.("Lacunarity: 2", &1, 1, 5, 0.5, 2, 25))
  |> normalise_octave_values.()

(lacunarity_1_values ++ lacunarity_2_values)
|> graph_1d.()
```

Here arethe same values but in a 2-dimensional space, it makes the gradient bumpy.

```elixir
for x <- 0..50, y <- 0..50 do
  do_octaves.("Lacunarity: 1", x, y, 3, 0.5, 1, 25)
end
|> normalise_octave_values.()
|> graph_2d.()
```

```elixir
for x <- 0..50, y <- 0..50 do
  do_octaves.("Lacunarity: 2", x, y, 3, 0.5, 2, 25)
end
|> normalise_octave_values.()
|> graph_2d.()
```

### Persistance

Persistance increases how much the small features impact the big features. The higher the persistance, the higher the impact.

It does this by modifying the _amplitude_ each octave. So more octaves will cause more of an effect. Each iteration of the octave will cause the persistance to have less of an effect.

Below is the same noise wave, with two different persistance values. Notice the large value is more distorted.

```elixir
persistance_0_5_values =
  0..300
  |> Enum.map(&do_octaves.("Persistance: 0.5", &1, 1, 4, 0.5, 2, 25))
  |> normalise_octave_values.()

persistance_2_values =
  0..300
  |> Enum.map(&do_octaves.("Persistance: 2", &1, 1, 4, 2, 2, 25))
  |> normalise_octave_values.()

(persistance_0_5_values ++ persistance_2_values)
|> graph_1d.()
```

Below is the same wave, with the same persistance, but different number of octaves. The one with the high octaves allows for the peristance to have more of an effect.

```elixir
octives_3_values =
  0..300
  |> Enum.map(&do_octaves.("Ocatives: 3", &1, 1, 3, 1.1, 2, 25))
  |> normalise_octave_values.()

octavies_5_values =
  0..300
  |> Enum.map(&do_octaves.("Ocatives: 15", &1, 1, 15, 1.1, 2, 25))
  |> normalise_octave_values.()

(octives_3_values ++ octavies_5_values)
|> graph_1d.()
```

However, if you keep the persistance between 0 & 1, it will still keep it's rough shape even when distored.

```elixir
octives_3_values =
  0..300
  |> Enum.map(&do_octaves.("Octaves: 3", &1, 1, 3, 0.9, 2, 25))
  |> normalise_octave_values.()

octavies_5_values =
  0..300
  |> Enum.map(&do_octaves.("Octaves: 15", &1, 1, 15, 0.9, 2, 25))
  |> normalise_octave_values.()

(octives_3_values ++ octavies_5_values)
|> graph_1d.()
```

## Creating Landmasses

Using octavies, persistance and lacunarity, we now have enough to create realistic looking landmasses.

The trick is to work out what values to use. Let's create a nice looking 1d (side-view) landmass that looks like a mountain.

```elixir
landmass =
  for x <- 0..50, y <- 0..50 do
    do_octaves.("Lacunarity: 2", x, y, 3, 0.5, 2.5, 50)
  end
  |> normalise_octave_values.()

landmass
|> graph_1d_slice.()
```

Looks, pretty good. What does it look like in 2d (top-down view)

```elixir
landmass
|> graph_2d.()
```

Add some colour based on height and it looks like a landmass!. Reminder that we have normalised all the values to between -1 and 1.

```elixir
Vl.new(width: 300, height: 300)
|> Vl.data_from_values(landmass)
|> Vl.transform(
  calculate: "datum.noise < -0.3 ? 'deep-sea' 
    : datum.noise < 0 ? 'sea' 
    : datum.noise < 0.1 ? 'sand' 
    : datum.noise < 0.3 ? 'grass' 
    : datum.noise < 0.7 ? 'trees' 
    : datum.noise < 0.9 ? 'mountain' 
    : 'snow'",
  as: "land_type"
)
|> Vl.mark(:rect)
|> Vl.encode_field(:x, "screen_x")
|> Vl.encode_field(:y, "screen_y")
|> Vl.encode_field(
  :color,
  "land_type",
  type: :nominal,
  scale: [
    domain: ["deep-sea", "sea", "sand", "grass", "trees", "mountain", "snow"],
    range: ["#1e40af", "#3b82f6", "#fef08a", "#84cc16", "#4d7c0f", "#a1a1aa", "#f4f4f5"]
  ]
)
|> Vl.config(view: [stroke: nil])
```

## Continue youtube video
